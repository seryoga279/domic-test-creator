/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DOMIC;


import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Сергей
 */
public class DomicTestCreator extends javax.swing.JFrame {

    public DefaultListModel listModel = new DefaultListModel();
    public DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode();
    public DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
    public MyCellRenderer renderer = new MyCellRenderer();
    public ArrayList<QuestionBlock> questionBlocks = new ArrayList<>();
    public String FilePatch;

    public int QuestionBlockIndex = 1;
    // public int QuestionIndex=0;

    public DomicTestCreator() {

        initComponents();
        //this.jTree1.setShowsRootHandles(true);
        AnswerList.setLayoutOrientation(JList.VERTICAL);
        AnswerList.setModel(listModel);
        QuestionTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        this.editable(false);

        // Корневой узел
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Тест");
        for (int i = 1; i < 2; i++) {
            // Содержимое корневого узла 
            DefaultMutableTreeNode folder = new DefaultMutableTreeNode("Блок вопросов " + i);
            root.add(folder);

            // Содержимое папок корневого узла
            DefaultMutableTreeNode leaf = new DefaultMutableTreeNode("вопрос " + i);
            leaf.setAllowsChildren(false);
            folder.add(leaf);

        }
        treeModel = new DefaultTreeModel(root, true);
        QuestionTree.setModel(treeModel);

        //jLabel4.setText(null);
        this.questionBlocks.add(new QuestionBlock());

        Question question = new Question(null);
        question.addAnswer(false, null);

        this.questionBlocks.get(0).questions.add(new Question(null));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        TestLabel = new javax.swing.JLabel();
        HelpLabel = new javax.swing.JLabel();
        ButtonSave = new javax.swing.JButton();
        QuestionAreaScroll = new javax.swing.JScrollPane();
        QuestionArea = new javax.swing.JTextArea();
        AnswerListScroll = new javax.swing.JScrollPane();
        AnswerList = new javax.swing.JList();
        AnswerField = new javax.swing.JTextField();
        QuestionTreeScroll = new javax.swing.JScrollPane();
        QuestionTree = new javax.swing.JTree();
        Footer = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AddQuestionBlockButton = new javax.swing.JButton();
        AddQuestionButton = new javax.swing.JButton();
        AddAnswerButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        Menu = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuFileOpenFile = new javax.swing.JMenuItem();
        TestMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TestLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TestLabel.setText("<html><p align=\"center\">Новый тест</p></html>");

        HelpLabel.setText("<html><p align=\"center\">Для создание нового напишите текст его содержания в текстовое поле, выберите необходимое количество правильных вариантов ответа, для перехода к созданию следующего вопроса нажмите \"Далее\", по окончанию работы нажмите \"Готово\"</p> </html>");
        HelpLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ButtonSave.setText("Далее");
        ButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSaveActionPerformed(evt);
            }
        });

        QuestionArea.setColumns(20);
        QuestionArea.setRows(5);
        QuestionAreaScroll.setViewportView(QuestionArea);

        AnswerList.setCellRenderer(renderer);
        AnswerListScroll.setViewportView(AnswerList);

        AnswerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerFieldActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Тест");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Блок вопросов №1");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Воопрос 1");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        QuestionTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        QuestionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                QuestionTreeValueChanged(evt);
            }
        });
        QuestionTreeScroll.setViewportView(QuestionTree);

        javax.swing.GroupLayout FooterLayout = new javax.swing.GroupLayout(Footer);
        Footer.setLayout(FooterLayout);
        FooterLayout.setHorizontalGroup(
            FooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(50, 50, 50)
                .addComponent(jLabel4)
                .addGap(50, 50, 50)
                .addComponent(jLabel5)
                .addGap(50, 50, 50)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FooterLayout.setVerticalGroup(
            FooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        AddQuestionBlockButton.setText("Добавить Блок вопросов");
        AddQuestionBlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddQuestionBlockButtonActionPerformed(evt);
            }
        });

        AddQuestionButton.setText("Добавить вопрос");
        AddQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddQuestionButtonActionPerformed(evt);
            }
        });

        AddAnswerButton.setText("Добавить");
        AddAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAnswerButtonActionPerformed(evt);
            }
        });

        jButton5.setText("Удалить");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        MenuFile.setText("Файл");

        MenuFileOpenFile.setText("Открыть тест");
        MenuFileOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFileOpenFileActionPerformed(evt);
            }
        });
        MenuFile.add(MenuFileOpenFile);

        TestMenu.setText("TestButton");
        TestMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestMenuActionPerformed(evt);
            }
        });
        MenuFile.add(TestMenu);
        MenuFile.add(jSeparator2);

        jMenuItem1.setText("Сохранить");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem1);

        Menu.add(MenuFile);

        jMenu2.setText("Edit");
        Menu.add(jMenu2);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(QuestionTreeScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddQuestionBlockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AddQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(QuestionAreaScroll)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AnswerField, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(ButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(246, 246, 246)))
                                .addComponent(AnswerListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddAnswerButton)))
                        .addContainerGap(38, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TestLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HelpLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1043, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(TestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(HelpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(QuestionAreaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(AnswerListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(AnswerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(ButtonSave)
                        .addGap(61, 61, 61))
                    .addComponent(QuestionTreeScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddQuestionBlockButton)
                            .addComponent(AddQuestionButton))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddAnswerButton)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)))
                .addComponent(Footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSaveActionPerformed

        Question question = new Question(QuestionArea.getText());
        for (int i = 0; i < listModel.getSize(); i++) {
            String text = String.valueOf(listModel.getElementAt(i));
            boolean correct = AnswerList.isSelectedIndex(i);
            question.addAnswer(correct, text);

        }

        this.questionBlocks.get(QuestionTree.getModel().getIndexOfChild(
                QuestionTree.getSelectionPath().getParentPath().getParentPath().getLastPathComponent(),
                QuestionTree.getSelectionPath().getParentPath().getLastPathComponent()))
                .addQuestion(
                        QuestionTree.getModel().getIndexOfChild(
                                QuestionTree.getSelectionPath().getParentPath().getLastPathComponent(),
                                QuestionTree.getSelectionPath().getLastPathComponent()), question);

        this.jLabel3.setText("save");


    }//GEN-LAST:event_ButtonSaveActionPerformed

    private void AddQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddQuestionButtonActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) QuestionTree.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode;

        if (parent == null) {
            return;
        }
        if ("Тест".equals(String.valueOf(QuestionTree.getSelectionPath().getLastPathComponent()))) {
            return;
        }

        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode("Вопрос " + (treeModel.getChildCount(QuestionTree.getSelectionPath().getLastPathComponent()) + 1));
        newNode.setAllowsChildren(false);
        int selectedIndex = parent.getIndex(selectedNode);
        treeModel.insertNodeInto(newNode, parent, selectedIndex + treeModel.getChildCount(parent) + 1);

        // Отображение нового узла.
        TreeNode[] nodes = treeModel.getPathToRoot(newNode);
        TreePath path = new TreePath(nodes);
        QuestionTree.scrollPathToVisible(path);

        // 
        try {
            this.questionBlocks.get(
                    QuestionTree.getModel().getIndexOfChild(
                            QuestionTree.getSelectionPath().getParentPath().getLastPathComponent(),
                            QuestionTree.getSelectionPath().getLastPathComponent()
                    )
            ).questions.add(new Question(null));
        } catch (NullPointerException e) {
            System.out.println("null point exeption");
        }


    }//GEN-LAST:event_AddQuestionButtonActionPerformed

    private void AddQuestionBlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddQuestionBlockButtonActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) QuestionTree.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode;

        if (parent == null) {
            return;
        }
        try {
            if ("Тест".equals(String.valueOf(QuestionTree.getSelectionPath().getParentPath().getLastPathComponent()))) {
                return;
            }
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }

        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode("Блок вопросов " + (treeModel.getChildCount(QuestionTree.getSelectionPath().getLastPathComponent()) + 1));
        DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode("Вопрос 1");
        newLeaf.setAllowsChildren(false);
        int selectedIndex = parent.getIndex(selectedNode);

        treeModel.insertNodeInto(newNode, parent, selectedIndex + treeModel.getChildCount(parent) + 1);
        treeModel.insertNodeInto(newLeaf, newNode, selectedIndex + 1);

        // Отображение нового узла.
        TreeNode[] nodes = treeModel.getPathToRoot(newNode);
        TreePath path = new TreePath(nodes);
        QuestionTree.scrollPathToVisible(path);
        System.out.println(parent);
        System.out.println(selectedIndex);

        //
        try {

            this.questionBlocks.add(new QuestionBlock());
            Question question = new Question(null);
            question.addAnswer(false, null);

            this.questionBlocks.get(QuestionBlockIndex).questions.add(question);
            QuestionBlockIndex++;
        } catch (NullPointerException e) {
            System.out.println("null point exeption");
        }


    }//GEN-LAST:event_AddQuestionBlockButtonActionPerformed

    private void AnswerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerFieldActionPerformed

    }//GEN-LAST:event_AnswerFieldActionPerformed

    private void AddAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAnswerButtonActionPerformed
        listModel.addElement(AnswerField.getText());
        AnswerField.setText(null);
    }//GEN-LAST:event_AddAnswerButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        listModel.remove(AnswerList.getSelectedIndex());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void QuestionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_QuestionTreeValueChanged
        this.editable(false);
        try {
            if ("Тест".equals(String.valueOf(QuestionTree.getSelectionPath().getParentPath().getParentPath().getLastPathComponent()))) {
                this.editable(true);
            }
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }

        this.QuestionArea.setText("");
        this.listModel.clear();
        this.jLabel3.setText(null);
        try {
            int QuestionBlockIndex = QuestionTree.getModel().getIndexOfChild(
                    QuestionTree.getSelectionPath().getParentPath().getParentPath().getLastPathComponent(),
                    QuestionTree.getSelectionPath().getParentPath().getLastPathComponent());
            int QuestionIndex = QuestionTree.getModel().getIndexOfChild(
                    QuestionTree.getSelectionPath().getParentPath().getLastPathComponent(),
                    QuestionTree.getSelectionPath().getLastPathComponent());

            if (this.questionBlocks.get(QuestionBlockIndex).getQuestionName(QuestionIndex) != null) {
                this.QuestionArea.setText(this.questionBlocks.get(QuestionBlockIndex).getQuestionName(QuestionIndex));
                for (int i = 0; this.questionBlocks.get(QuestionBlockIndex).questions.get(QuestionIndex).answers.size() > i; i++) {

                }
                for (int i = 0; i < this.questionBlocks.get(QuestionBlockIndex).questions.get(QuestionIndex).answers.size(); i++) {
                    this.listModel.addElement(questionBlocks.get(QuestionBlockIndex).getAnswerText(QuestionIndex, i));

                    if (questionBlocks.get(QuestionBlockIndex).getAnswerCorrect(QuestionIndex, i) == true) {

                        this.AnswerList.setSelectionInterval(i, 2);

                    }
                }

            }
        } catch (NullPointerException e) {
            System.out.println("NULL POINT");

        }


    }//GEN-LAST:event_QuestionTreeValueChanged

    private void MenuFileOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFileOpenFileActionPerformed
        
        
        final JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        this.FilePatch = fileChooser.getSelectedFile().getAbsolutePath();
        GeneratePerl gp = new GeneratePerl();
        try {
            gp.GeneratePerl(fileChooser.getSelectedFile());
        } catch (IOException ex) {
            Logger.getLogger(DomicTestCreator.class.getName()).log(Level.SEVERE, null, ex);
        }
        EncodeJson ej = new EncodeJson(this.questionBlocks,gp.getJson());

        /*
                this.questionBlocks.clear();
        EncodeJson encodeJson = new EncodeJson(this.questionBlocks, FilePatch);
        this.questionBlocks = encodeJson.questionBlocks;

        // Корневой узел
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Тест");
        for (int i = 1; i < this.questionBlocks.size(); i++) {
            // Содержимое корневого узла 
            DefaultMutableTreeNode folder = new DefaultMutableTreeNode("Блок вопросов " + i);
            root.add(folder);
            for (int j = 1; j < this.questionBlocks.get(i).questions.size(); j++) {
                // Содержимое папок корневого узла
                DefaultMutableTreeNode leaf = new DefaultMutableTreeNode("вопрос " + i);
                leaf.setAllowsChildren(false);
                folder.add(leaf);

            }
        }
                */
        


    }//GEN-LAST:event_MenuFileOpenFileActionPerformed

    private void TestMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestMenuActionPerformed
        Object parent = QuestionTree.getSelectionPath().getParentPath().getParentPath().getLastPathComponent();
        Object child = QuestionTree.getSelectionPath().getParentPath().getLastPathComponent();

        //DecodePerl gP = new DecodePerl(this.questionBlocks);
//System.out.println(child);
//System.out.println(parent);
        System.out.println(QuestionTree.getModel().getIndexOfChild(parent, child));
//System.out.println(treeModel.getChildCount(parent)); // количество элементов в выбранном узле
//System.out.println(jTree1.getSelectionPath().getLastPathComponent());// последний выбранный компонент 
//System.out.println(jTree1.getSelectionPath().getParentPath().getLastPathComponent());//родитель выбранного компонента
//System.out.println(jTree1.getSelectionPath());// массив пути выбранного компонента
//System.out.println(jTree1.getLeadSelectionRow());
//System.out.println(jTree1.getSelectionPath().getParentPath().getParentPath().getLastPathComponent());//родитель выбранного компонента
//Answer answer = new Answer("test",true);
//System.out.println(answer.getAnswerText());
//Question question = new Question("Test questions");
//question.addAnswer(true, "test answer");
//System.out.println(question.getAnswerText(0));
//System.out.println(questionBlocks.get(0).getAnswerText(0, 0));
    }//GEN-LAST:event_TestMenuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        DecodePerl decodePerl = new DecodePerl(this.questionBlocks);
        System.out.println(decodePerl.getPrint());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public static void main(String args[]) {

    }

    public void editable(boolean val) {

        this.AddAnswerButton.setEnabled(val);
        
        this.ButtonSave.setEnabled(val);
        this.jButton5.setEnabled(val);
        this.AddQuestionBlockButton.setEnabled(val);
        this.AddQuestionButton.setEnabled(val);
        this.QuestionArea.setEnabled(val);
        this.AnswerField.setEnabled(val);
        this.AnswerList.setEnabled(val);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddAnswerButton;
    private javax.swing.JButton AddQuestionBlockButton;
    private javax.swing.JButton AddQuestionButton;
    private javax.swing.JTextField AnswerField;
    private javax.swing.JList AnswerList;
    private javax.swing.JScrollPane AnswerListScroll;
    private javax.swing.JButton ButtonSave;
    private javax.swing.JPanel Footer;
    private javax.swing.JLabel HelpLabel;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuFileOpenFile;
    private javax.swing.JTextArea QuestionArea;
    private javax.swing.JScrollPane QuestionAreaScroll;
    private javax.swing.JTree QuestionTree;
    private javax.swing.JScrollPane QuestionTreeScroll;
    private javax.swing.JLabel TestLabel;
    private javax.swing.JMenuItem TestMenu;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables

}
